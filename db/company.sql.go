// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: company.sql

package db

import (
	"context"
)

const deleteCompany = `-- name: DeleteCompany :exec
DELETE FROM
    company
WHERE
    name = ?
`

func (q *Queries) DeleteCompany(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteCompany, name)
	return err
}

const deleteCompanyType = `-- name: DeleteCompanyType :exec
DELETE FROM
    company_type
WHERE
    name = ?
`

func (q *Queries) DeleteCompanyType(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteCompanyType, name)
	return err
}

const deleteCompanyTypeRel = `-- name: DeleteCompanyTypeRel :exec
DELETE FROM
    company_type_rel
WHERE
    company_id = ?
`

func (q *Queries) DeleteCompanyTypeRel(ctx context.Context, companyID int64) error {
	_, err := q.db.ExecContext(ctx, deleteCompanyTypeRel, companyID)
	return err
}

const getCompany = `-- name: GetCompany :one
SELECT
    company.id, company.name, company.notes,
    company_type.id, company_type.name
FROM
    company
    INNER JOIN company_type_rel ON company_type_rel.company_id = company.id
    INNER JOIN company_type ON company_type.id = company_type_rel.company_type_id
WHERE
    company.id = ?
LIMIT
    1
`

type GetCompanyRow struct {
	ID          int64       `json:"id"`
	Name        string      `json:"name"`
	Notes       string      `json:"notes"`
	CompanyType CompanyType `json:"company_type"`
}

func (q *Queries) GetCompany(ctx context.Context, id int64) (GetCompanyRow, error) {
	row := q.db.QueryRowContext(ctx, getCompany, id)
	var i GetCompanyRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Notes,
		&i.CompanyType.ID,
		&i.CompanyType.Name,
	)
	return i, err
}

const getCompanyIdByName = `-- name: GetCompanyIdByName :one
SELECT
    company.id
FROM
    company
WHERE
    company.name = ?
LIMIT
    1
`

func (q *Queries) GetCompanyIdByName(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getCompanyIdByName, name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getCompanyType = `-- name: GetCompanyType :one
SELECT
    id, name
FROM
    company_type
WHERE
    name = ?
LIMIT
    1
`

func (q *Queries) GetCompanyType(ctx context.Context, name string) (CompanyType, error) {
	row := q.db.QueryRowContext(ctx, getCompanyType, name)
	var i CompanyType
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const insertCompany = `-- name: InsertCompany :one
INSERT INTO
    company(name, notes)
VALUES
    (?, ?) RETURNING id, name, notes
`

type InsertCompanyParams struct {
	Name  string `json:"name"`
	Notes string `json:"notes"`
}

func (q *Queries) InsertCompany(ctx context.Context, arg InsertCompanyParams) (Company, error) {
	row := q.db.QueryRowContext(ctx, insertCompany, arg.Name, arg.Notes)
	var i Company
	err := row.Scan(&i.ID, &i.Name, &i.Notes)
	return i, err
}

const insertCompanyType = `-- name: InsertCompanyType :one
INSERT INTO
    company_type(name)
VALUES
    (?) RETURNING id, name
`

func (q *Queries) InsertCompanyType(ctx context.Context, name string) (CompanyType, error) {
	row := q.db.QueryRowContext(ctx, insertCompanyType, name)
	var i CompanyType
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const insertCompanyTypeRel = `-- name: InsertCompanyTypeRel :one
INSERT INTO
    company_type_rel(company_id, company_type_id)
VALUES
    (?, ?) RETURNING id, company_id, company_type_id
`

type InsertCompanyTypeRelParams struct {
	CompanyID     int64 `json:"company_id"`
	CompanyTypeID int64 `json:"company_type_id"`
}

func (q *Queries) InsertCompanyTypeRel(ctx context.Context, arg InsertCompanyTypeRelParams) (CompanyTypeRel, error) {
	row := q.db.QueryRowContext(ctx, insertCompanyTypeRel, arg.CompanyID, arg.CompanyTypeID)
	var i CompanyTypeRel
	err := row.Scan(&i.ID, &i.CompanyID, &i.CompanyTypeID)
	return i, err
}

const listCompany = `-- name: ListCompany :many
SELECT
    company.id, company.name, company.notes,
    company_type.id, company_type.name,
    (
        SELECT
            count(*)
        FROM
            job_application
        WHERE
            job_application.company_id = company.id
    ) AS application_cnt,
    (
        SELECT
            cast(max(event.date) AS integer)
        FROM
            event
            INNER JOIN job_application ON job_application.id = event.job_application_id
        WHERE
            job_application.company_id = company.id
            AND event.date <= unixepoch()
    ) AS last_event,
    (
        SELECT
            cast(min(event.date) AS integer)
        FROM
            event
            INNER JOIN job_application ON job_application.id = event.job_application_id
        WHERE
            job_application.company_id = company.id
            AND event.date >= unixepoch()
    ) AS next_event
FROM
    company
    INNER JOIN company_type_rel ON company_type_rel.company_id = company.id
    INNER JOIN company_type ON company_type.id = company_type_rel.company_type_id
`

type ListCompanyRow struct {
	ID             int64       `json:"id"`
	Name           string      `json:"name"`
	Notes          string      `json:"notes"`
	CompanyType    CompanyType `json:"company_type"`
	ApplicationCnt int64       `json:"application_cnt"`
	LastEvent      int64       `json:"last_event"`
	NextEvent      int64       `json:"next_event"`
}

func (q *Queries) ListCompany(ctx context.Context) ([]ListCompanyRow, error) {
	rows, err := q.db.QueryContext(ctx, listCompany)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListCompanyRow{}
	for rows.Next() {
		var i ListCompanyRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Notes,
			&i.CompanyType.ID,
			&i.CompanyType.Name,
			&i.ApplicationCnt,
			&i.LastEvent,
			&i.NextEvent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCompanyType = `-- name: ListCompanyType :many
SELECT
    id, name
FROM
    company_type
`

func (q *Queries) ListCompanyType(ctx context.Context) ([]CompanyType, error) {
	rows, err := q.db.QueryContext(ctx, listCompanyType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CompanyType{}
	for rows.Next() {
		var i CompanyType
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCompany = `-- name: UpdateCompany :exec
UPDATE
    company
SET
    name = ?,
    notes = ?
WHERE
    id = ?
`

type UpdateCompanyParams struct {
	Name  string `json:"name"`
	Notes string `json:"notes"`
	ID    int64  `json:"id"`
}

func (q *Queries) UpdateCompany(ctx context.Context, arg UpdateCompanyParams) error {
	_, err := q.db.ExecContext(ctx, updateCompany, arg.Name, arg.Notes, arg.ID)
	return err
}

const updateCompanyType = `-- name: UpdateCompanyType :exec
UPDATE
    company_type
SET
    name = ?
WHERE
    id = ?
`

type UpdateCompanyTypeParams struct {
	Name string `json:"name"`
	ID   int64  `json:"id"`
}

func (q *Queries) UpdateCompanyType(ctx context.Context, arg UpdateCompanyTypeParams) error {
	_, err := q.db.ExecContext(ctx, updateCompanyType, arg.Name, arg.ID)
	return err
}
